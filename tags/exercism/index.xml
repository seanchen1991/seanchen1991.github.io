<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Exercism on Sean Chen&#39;s Blog</title>
    <link>https://seanchen1991.github.io/tags/exercism/</link>
    <description>Recent content in Exercism on Sean Chen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Jul 2020 16:20:00 -0700</lastBuildDate>
    
	<atom:link href="https://seanchen1991.github.io/tags/exercism/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Haskell::From(Rust) I: Infix Notation and Currying</title>
      <link>https://seanchen1991.github.io/posts/haskell-from-rust-i/</link>
      <pubDate>Mon, 20 Jul 2020 16:20:00 -0700</pubDate>
      
      <guid>https://seanchen1991.github.io/posts/haskell-from-rust-i/</guid>
      <description>Prelude    I’ve been meaning to learn Haskell for a while now. Most people who write Rust likely have had at least a background-level exposure to Haskell (if they hadn’t already encountered/learned the language on their own prior). Since the language (along with ML and possibly OCaml?) had such an effect on Rust’s development, digging into it will likely pay dividends in the form of improving my understanding of Rust.</description>
    </item>
    
    <item>
      <title>Some Learnings from Implementing a Normalizing Rust Representer</title>
      <link>https://seanchen1991.github.io/posts/rust-representer/</link>
      <pubDate>Mon, 13 Jul 2020 11:50:00 -0700</pubDate>
      
      <guid>https://seanchen1991.github.io/posts/rust-representer/</guid>
      <description>I’ve been helping out and contributing to exercism.io for the past few months. As an open source platform for learning programming languages that supports Rust, Exercism aligns very well with all the things I’m currently passionate about: open source, teaching, and Rust.
One of the most challenging hurdles the Exercism platform faces is the fact that students who opt in to receive mentor feedback on their work have to wait for a live person to get around to reviewing their submission.</description>
    </item>
    
  </channel>
</rss>